<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Log;

class Order extends Model
{
    const REFUND_STATUS_PENDING = 'pending';
    const REFUND_STATUS_APPLIED = 'applied';
    const REFUND_STATUS_PROCESSING = 'processing';
    const REFUND_STATUS_SUCCESS = 'success';
    const REFUND_STATUS_FAILED = 'failed';

    const SHIP_STATUS_PENDING = 'pending';
    const SHIP_STATUS_DELIVERED = 'delivered';
    const SHIP_STATUS_RECEIVED = 'received';

    const TYPE_NORMAL = 'normal';
    const TYPE_CROWDFUNDING = 'crowdfunding';

    public static $refundStatusMap = [
        self::REFUND_STATUS_PENDING => '未退款',
        self::REFUND_STATUS_APPLIED => '已申请退款',
        self::REFUND_STATUS_PROCESSING => '退款中',
        self::REFUND_STATUS_SUCCESS => '退款成功',
        self::REFUND_STATUS_FAILED => '退款失败',
    ];
    public static $shipStatusMap = [
        self::SHIP_STATUS_PENDING => '未发货',
        self::SHIP_STATUS_DELIVERED => '已发货',
        self::SHIP_STATUS_RECEIVED => '已收货'
    ];
    public static $typeMap = [
        self::TYPE_NORMAL => '普通商品订单',
        self::TYPE_CROWDFUNDING => '众筹商品订单',
    ];
    protected $fillable = [
        'no', 'address', 'total_amount', 'remark', 'payment_method', 'paid_at', 'payment_no', 'refund_status', 'refund_no', 'reviewed', 'closed', 'ship_status', 'ship_data', 'extra','type'
    ];
    protected $casts = [
        'reviewed' => 'boolean',
        'closed'     => 'boolean',
        'address'   => 'json',
        'ship_data' => 'json',
        'extra'     => 'json'
    ];
    protected $dates = [
        'paid_at'
    ];
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($model){
            if (!$model->no){
                // 调用 findAvailableNo 生成订单流水号
                $model->no = static::findAvailableNo();
                if (!$model->no){
                    return false;
                }
            }
        });
    }
    public function user(){
        return $this->belongsTo(User::class);
    }
    public function items(){
        return $this->hasMany(OrderItem::class);
    }
    public function couponCode()
    {
        return $this->belongsTo(CouponCode::class);
    }
    public static function findAvailableNo(){
        $prefix = date('YmdHis');
        for ($i=0;$i<10;$i++){
            $no = $prefix.str_pad(random_int(0,999999),6,'0',STR_PAD_LEFT);
            if (!static::where('no',$no)->exists()) {
                return $no;
            }
        }

        Log::warning('find order no failed');
        return false;
    }

}
